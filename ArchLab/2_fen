#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# GuoDawei 1900012995
#
# Detailed description for pipeline lies in the header of pipe-line.hcl
# To sum up, we add "IADDQ" commands to directly add an immediate number
# to a register. Thus, we could save one commands whenever we tried 
# to imitate the "ADDQ" in x86-64.
# 
# Description for ncopy as follows:
# To optimize ncopy, we have 4 aspects to lower the CPEs.
#
# 1. Avoiding load/use adventure. Add other commands, which didn't use 
# data in rA, between a "mrmovq D(rB), rA" and an "andq rA, rA"/"rmmovq 
# rA, D(rB)". 
#
# 2. Considering "always taken" stradegy and Avoiding wrong prediction. 
# Always use "jXX" when it is true in majority of conditions.(Or the wrong 
# prediction make CPEs increase a lot).
#
# 3. Use "k x k" loop unrolling. Since there is only 10 free registers, 
# max(k) = 10. After trying, we found 10x10 may be more than 1k bytes, 
# while 9x9 is OK. So we use 9x9 unrolling.
#
# 4. Use dichotomy(ErFenFa) to deal with the remaining elements. 
# Actually, optimization with the remaining numbers matters more 
# for CPEs.
# Assume that the number of the remaining numbers is k (0<=k<=8). 
# For example, put 0,1,2 in group 1; 3 in group 2; 4,5,6,7 in group 3. 
# etc. 
# So we could judge the number of the remaining numbers with no more than # 3 steps.
#
# Other small tricks lie in notes.^^
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-9, %rdx
	jl Nposr0		#SHOULD be always taken 
				#wrong prediction when length is 1-8
				#is fatal for average CPEs.

Loop:	mrmovq (%rdi), %r8	#load adventure here
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10	
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12	
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14	
	mrmovq 56(%rdi), %rbx
	mrmovq 64(%rdi), %rcx
	
	
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)	
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)	
	rmmovq %rbx, 56(%rsi)
	rmmovq %rcx, 64(%rsi)
	
	andq %r8, %r8
	jle Npos1_0		# 50/50, doesn't matter
	iaddq $1, %rax		# count++

Npos1_0:	
	andq %r9, %r9
	jle Npos1_1
	iaddq $1, %rax
	
Npos1_1:
	andq %r10, %r10
	jle Npos1_2
	iaddq $1, %rax
Npos1_2:
	andq %r11, %r11
	jle Npos1_3
	iaddq $1, %rax	

Npos1_3:	
	andq %r12, %r12
	jle Npos1_4
	iaddq $1, %rax
	
Npos1_4:
	andq %r13, %r13
	jle Npos1_5
	iaddq $1, %rax
	
Npos1_5:
	andq %r14, %r14
	jle Npos1_6
	iaddq $1, %rax
Npos1_6:
	andq %rbx, %rbx
	jle Npos1_7
	iaddq $1, %rax
Npos1_7:
	andq %rcx, %rcx
	jle update
	iaddq $1, %rax

update:
	iaddq $72, %rdi		
	iaddq $72, %rsi
	iaddq $-9, %rdx
	jge Loop		#SHOULD always taken, 
				#wrong prediction only once.

Nposr0:
	iaddq $6, %rdx		#2-9+6 = -1 3-9+6 = 0
	jl left012		#always taken(average > total)
	jg right45678
    			#fall down
left3:
	mrmovq 16(%rdi), %r13 	
	mrmovq 8(%rdi), %r14
	mrmovq (%rdi), %rbx
	jmp npos3

left012:
	mrmovq (%rdi), %rbx	#early mrmovq
	iaddq $2, %rdx
	je npos1
	mrmovq 8(%rdi), %r14
	jg npos2
	ret 

right45:
	iaddq $1, %rdx
	jl npos4
	mrmovq 32(%rdi), %r11
	jmp npos5

right45678:
	mrmovq 24(%rdi), %r12   #4
	mrmovq 16(%rdi), %r13
	mrmovq 8(%rdi), %r14
	mrmovq (%rdi), %rbx
	iaddq $-3, %rdx
	jl right45
	mrmovq 40(%rdi), %r10   #6
	mrmovq 32(%rdi), %r11	 #5
	je npos6
	mrmovq 56(%rdi), %r8    #8
	mrmovq 48(%rdi), %r9    #7
				 #fall down
right78:
	iaddq $-1, %rdx
	je npos7
				 #fall
npos8:  
	andq %r8, %r8
	rmmovq %r8, 56(%rsi)
	jle npos7
	iaddq $1, %rax

npos7:  #7
	andq %r9, %r9
	rmmovq %r9, 48(%rsi)
	jle npos6
	iaddq $1, %rax

npos6:
	andq %r10, %r10
	rmmovq %r10, 40(%rsi)
	jle npos5
	iaddq $1, %rax

npos5:
	andq %r11, %r11
	rmmovq %r11, 32(%rsi)
	jle npos4
	iaddq $1, %rax

npos4:
	andq %r12, %r12
	rmmovq %r12, 24(%rsi)
	jle npos3
	iaddq $1, %rax
npos3:
	andq %r13, %r13
	rmmovq %r13, 16(%rsi)
	jle npos2
	iaddq $1, %rax
npos2:
	andq %r14, %r14
	rmmovq %r14, 8(%rsi)
	jle npos1
	iaddq $1, %rax

npos1:
	andq %rbx, %rbx
	rmmovq %rbx, (%rsi)
	jle done
	iaddq $1, %rax 
done:
	ret
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */